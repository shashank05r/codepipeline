## Node.js App Deployment on Amazon EKS using AWS CI/CD with Blue-Green Strategy
Welcome to the complete guide for setting up CI/CD for a containerized Node.js application, deploying to Amazon EKS with Blue-Green deployment using AWS CodePipeline, CodeBuild, CodeDeploy, and ECR.

This README.md is divided into the following sections:

✅ Project Overview

🛠️ Prerequisites & Architecture

⚙️ CI/CD Pipeline Steps

🔄 Blue-Green Deployment with CodeDeploy

📦 Kubernetes Setup (Manifests)

📁 Folder Structure & Conclusion

✅ Project Overview
This project demonstrates a real-world production-grade deployment pipeline using AWS-native tools and Kubernetes. It automates the following:

Source Control using AWS CodeCommit

Build & Package using CodeBuild (containerize with Docker)

Image Registry using Amazon Elastic Container Registry (ECR)

CI/CD Orchestration using AWS CodePipeline

Zero-Downtime Deployments using Blue-Green with AWS CodeDeploy

Production Hosting using Amazon EKS (Elastic Kubernetes Service)

🛠️ Prerequisites & Architecture
🔐 IAM & Infrastructure Setup
Make sure you have:

An IAM Role with ECR, CodePipeline, CodeBuild, CodeDeploy, and EKS access.

An existing EKS Cluster (with kubectl configured).

AWS CLI, kubectl, and Docker installed on your machine.

📐 Architecture Diagram
mathematica
Copy
Edit
Developer → CodeCommit → CodeBuild → ECR → CodeDeploy → EKS (Blue-Green) → User
The pipeline:

Builds the Docker image.

Pushes it to ECR.

Deploys Blue-Green environments on EKS using Kubernetes manifests.

⚙️ CI/CD Pipeline Steps Explained
1️⃣ CodeCommit Setup
Create a Git repository using AWS CodeCommit:

bash
Copy
Edit
aws codecommit create-repository --repository-name nodejs-eks-app
Push your Node.js app with:

Dockerfile

buildspec.yml

appspec.yaml

Kubernetes YAMLs: blue.yaml, green.yaml

Deployment hook scripts

2️⃣ Dockerfile
Your Dockerfile containerizes the Node.js app:

dockerfile
Copy
Edit
FROM node:18
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3000
CMD ["node", "server.js"]
This builds a lightweight, production-ready container.

3️⃣ buildspec.yml — CI/CD Core
The buildspec.yml controls the build stages in CodeBuild. Each phase is explained below.

🧪 Pre-Build Phase
The pre_build phase logs in to Amazon ECR so Docker can push images securely.

bash
Copy
Edit
aws ecr get-login-password | docker login --username AWS --password-stdin <account-id>.dkr.ecr.us-east-1.amazonaws.com
This step generates a temporary token and authenticates with ECR, enabling the rest of the pipeline to access the container registry securely.

It’s critical because pushing an image to a private ECR repository without this login will result in authentication errors.

🏗️ Build Phase
The build phase builds the Docker image and tags it for your ECR repository:

bash
Copy
Edit
docker build -t nodejs-eks-app .
docker tag nodejs-eks-app:latest <account-id>.dkr.ecr.us-east-1.amazonaws.com/nodejs-eks-app:latest
This turns your Node.js code into a Docker image and prepares it to be pushed. The tagging operation associates your local image with a unique ECR repository URI.

This tag is what CodeDeploy will use later to pull the correct image during the Blue-Green rollout.

📤 Post-Build Phase
The post_build phase pushes the image and prepares it for deployment:

bash
Copy
Edit
docker push <account-id>.dkr.ecr.us-east-1.amazonaws.com/nodejs-eks-app:latest
Then it generates the imagedefinitions.json file:

bash
Copy
Edit
printf '[{"name":"nodejs","imageUri":"%s"}]' <image-uri> > imagedefinitions.json
This file tells CodeDeploy which Docker image to use and is passed automatically to the deployment stage by CodePipeline.

🔄 Blue-Green Deployment with CodeDeploy
💠 Step 1: appspec.yaml
This file is required by CodeDeploy to perform a Blue-Green deployment on EKS:

yaml
Copy
Edit
version: 0.0
Resources:
  - TargetService:
      Type: AWS::EKS::Service
      Properties:
        TaskDefinition: <placeholder>
        LoadBalancerInfo:
          ContainerName: nodejs
          ContainerPort: 3000
Hooks:
  - BeforeAllowTraffic: scripts/before_traffic.sh
  - AfterAllowTraffic: scripts/after_traffic.sh
The hooks allow you to verify health or run tests before shifting traffic.

💠 Step 2: Configure CodeDeploy
Go to AWS CodeDeploy → Create Application

Platform: Amazon EKS

Deployment Type: Blue/Green

Choose your EKS cluster

Select your K8s Service that will receive traffic

Attach appspec.yaml and hook scripts

CodeDeploy will now manage a Blue-Green rollout using Kubernetes deployment manifests (blue.yaml & green.yaml).

📦 Kubernetes Setup
🔵 Blue Environment
yaml
Copy
Edit
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodejs-blue
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nodejs
      version: blue
  template:
    metadata:
      labels:
        app: nodejs
        version: blue
    spec:
      containers:
      - name: nodejs
        image: <ecr-image-uri>
        ports:
        - containerPort: 3000
This is the live (currently serving traffic) version.

🟢 Green Environment
Copy of the blue deployment but labeled green. It’s launched in parallel for testing before switching traffic:

yaml
Copy
Edit
metadata:
  name: nodejs-green
Once green is verified, traffic is shifted from blue to green.

📁 Folder Structure
pgsql
Copy
Edit
.
├── Dockerfile
├── buildspec.yml
├── appspec.yaml
├── taskdef.json
├── imagedefinitions.json
├── app.js
└── README.md
✅ Conclusion
You've successfully implemented a production-ready CI/CD pipeline with AWS-native tools for a Node.js app deployed on EKS using Blue-Green deployments.

This ensures:

Zero-downtime deployments

